<style>
  .product-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
    gap: 20px;
  }

  .product-card {
    position: relative;
    cursor: pointer;
  }

  .product-card img {
    width: 100%;
    display: block;
    border-radius: 10px;
  }

  .plus-icon {
    position: absolute;
    bottom: 10px;
    right: 10px;
    background: black;
    color: white;
    width: 30px;
    height: 30px;
    border-radius: 50%;
    font-size: 20px;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: 0.3s;
  }

  .plus-icon:hover {
    background: #333;
  }

  /* Popup */
  .popup-overlay {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.6);
    z-index: 999;
    justify-content: center;
    align-items: center;
  }

  .popup-content {
    background: white;
    padding: 30px;
    max-width: 500px;
    width: 90%;
    border-radius: 10px;
    position: relative;
  }

  .popup-content img {
    width: 100%;
    height: 300px;
    object-fit: cover;
    margin-bottom: 15px;
  }

  .popup-close {
    position: absolute;
    top: 10px;
    right: 15px;
    font-size: 22px;
    cursor: pointer;
    color: black;
  }

  .popup-title {
    font-size: 22px;
    margin-bottom: 10px;
  }

  .popup-button {
    background: black;
    color: white;
    padding: 10px 20px;
    text-decoration: none;
    display: inline-block;
    border-radius: 5px;
    margin-top: 15px;
  }
</style>

<div class="product-grid">
  {% for product in collections.all.products %}
    <div class="product-card">
      <img width="" height="" src="{{ product.featured_image | img_url: 'master' }}" alt="{{ product.title }}">
      <div class="plus-icon" data-handle="{{ product.handle }}">+</div>
    </div>
  {% endfor %}
</div>

<!-- Popup -->
<div class="popup-overlay" id="popupOverlay">
  <div class="popup-content" id="popupContent">
    <span class="popup-close" id="popupClose">&times;</span>
    <img id="popupImage" src="" alt="">
    <div class="popup-title" id="popupTitle"></div>
    <div id="popupVariants"></div>
    <a id="popupLink" class="popup-button" href="#">Shop Now</a>
  </div>
</div>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    const overlay = document.getElementById("popupOverlay");
    const closeBtn = document.getElementById("popupClose");
    const popupImage = document.getElementById("popupImage");
    const popupTitle = document.getElementById("popupTitle");
    const popupVariants = document.getElementById("popupVariants");
    const popupLink = document.getElementById("popupLink");

    const plusIcons = document.querySelectorAll(".plus-icon");

    plusIcons.forEach(function (icon) {
      icon.addEventListener("click", function () {
        const handle = icon.getAttribute("data-handle");

        fetch(/products/${handle}.js)
          .then(function (response) {
            return response.json();
          })
          .then(function (product) {
            // Basic info
            popupImage.src = product.images[0];
            popupTitle.textContent = product.title;
            popupLink.href = product.url;

            // Determine color & size option indexes
            let colorIndex = product.options.findIndex(opt => opt.name.toLowerCase() === 'color');
            let sizeIndex = product.options.findIndex(opt => opt.name.toLowerCase() === 'size');

            let colorOptions = new Set();
            let sizeOptions = new Set();

            product.variants.forEach(function (variant) {
              if (colorIndex >= 0) {
                colorOptions.add(variant.options[colorIndex]);
              }
              if (sizeIndex >= 0) {
                sizeOptions.add(variant.options[sizeIndex]);
              }
            });

            // Color HTML
            let colorHTML = '';
            if (colorOptions.size > 0) {
              colorHTML += '<div><strong>Select Color:</strong>';
              colorHTML += '<div style="display:flex;gap:10px;margin-top:5px;margin-bottom:10px;">';

              colorOptions.forEach(function (color) {
                const safeColor = color.toLowerCase();
                colorHTML += 
                  <div title="${color}" style="
                    width:30px;
                    height:30px;
                    border:2px solid ${safeColor};
                    background:${safeColor};
                    border-radius:50%;
                    cursor:pointer;
                  "></div>
                ;
              });

              colorHTML += '</div></div>';
            }

            // Size HTML
            let sizeHTML = '';
            if (sizeOptions.size > 0) {
              sizeHTML += '<label for="variant-select">Select Size:</label>';
              sizeHTML += '<select id="variant-select" style="width:100%;padding:6px;margin-top:5px;">';
              sizeOptions.forEach(function (size) {
                sizeHTML += <option>${size}</option>;
              });
              sizeHTML += '</select>';
            }

            // Inject into popup
            popupVariants.innerHTML = colorHTML + sizeHTML;
            overlay.style.display = "flex";
          })
          .catch(function (error) {
            console.error("Product fetch error:", error);
          });
      });
    });

    // Close popup
    closeBtn.addEventListener("click", function () {
      overlay.style.display = "none";
    });

    overlay.addEventListener("click", function (e) {
      if (e.target === overlay) {
        overlay.style.display = "none";
      }
    });
  });
</script>


{% schema %}
{
  "name": "Product Grid",
  "settings": [],
  "presets": [
    {
      "name": "Product Grid"
    }
  ]
}
{% endschema %}